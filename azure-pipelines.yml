variables:
- group: common

- name: buildContextFolder
  value: '.'

- name: imageRepository
  value: 'registry.see.asseco.com/platform/adaptive-ui'

- name: dockerfilePath
  value: 'Dockerfile'

- name: cacheVolumes
  value: |
    /opt/cache/node_modules/adaptive-cards:/source/source/nodejs/node_modules

pool: 'Digital'

steps:
- script: |
    sed -i 's/root: \//root: \/adaptive-ui/g' source/nodejs/adaptivecards-site/_config.yml
  displayName: 'CHANGE_site_path_root'

- task: DockerAdvanced@0
  displayName: 'COMMIT_install'
  inputs:
    image: 'registry.see.asseco.com/tools/angular-module-builder:9.0'
    dockerRegistryEndpoint: harbor
    commands: |
      cd source/nodejs
      npm install --no-progress --loglevel=warn
    volumes: |
      $(cacheVolumes)

- task: DockerAdvanced@0
  displayName: 'COMMIT_build'
  inputs:
    image: 'registry.see.asseco.com/tools/angular-module-builder:9.0'
    dockerRegistryEndpoint: harbor
    commands: |
      cd source/nodejs
      npx lerna bootstrap
      npx lerna run build
    volumes: |
      $(cacheVolumes)

- task: DockerAdvanced@0
  displayName: 'COMMIT_generate_version'
  inputs:
    image: 'registry.see.asseco.com/tools/image-tagger'
    dockerRegistryEndpoint: harbor
    envVars: |
      TAGGER_VERSION=v2
      GITHUB_TOKEN=$(githubToken)

- script: |
    echo -e "\nCOPY --chown=1001:0 .version /" >> $(dockerfilePath)
  displayName: 'COMMIT_tag_version'

- task: DockerAdvanced@0
  displayName: 'COMMIT_publish'
  inputs:
    action: BuildAndPush
    context: $(buildContextFolder)
    image: $(imageRepository)
    dockerfile: $(dockerfilePath)
    dockerRegistryEndpoint: harbor

- task: DockerAdvanced@0
  displayName: 'ACCEPTANCE_setup_environment'
  inputs:
    image: 'alpine/helm'
    commands: |
      export CI_BUILD_TAG=$(cat .version)
      helm upgrade --install adaptive-ui --namespace platform-docs charts/adaptive-ui --set image.tag=$CI_BUILD_TAG --kubeconfig k8s-asee-dp-robot --atomic
    secureFile: k8s-asee-dp-robot

- script: |
    IFS=',' read -a tags <<< $(cat .tags)
    for tag in "${tags[@]}"
    do
      docker rmi $(imageRepository):${tag}
    done
  displayName: 'COMMIT_cleanup'
  condition: always()