{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: {{ include "helper.kind" . | quote }}
metadata:
  name: {{ include "helper.fullname" . | quote }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "helper.metadataLabels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if ( eq "StatefulSet" ( include "helper.kind" . ) ) }}
  serviceName: {{ include "helper.fullname" . | quote }}
  podManagementPolicy: {{ .Values.statefulset.podManagementPolicy | quote }}
  updateStrategy:
    type: {{ .Values.statefulset.updateStrategy | quote }}
    {{- if ( eq "Recreate" .Values.statefulset.updateStrategy ) }}
    rollingUpdate: null
    {{- else if .Values.statefulset.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.statefulset.rollingUpdatePartition | quote }}
    {{- end }}
  {{- else }}
  strategy:
    type: {{ .Values.deployment.strategy | quote }}
    {{- if ( eq "Recreate" .Values.deployment.strategy ) }}
    rollingUpdate: null
    {{- else if and .Values.deployment.maxUnavailable .Values.deployment.maxSurge }}
    rollingUpdate:
      maxUnavailable: {{ .Values.deployment.maxUnavailable }}
      maxSurge: {{ .Values.deployment.maxSurge }}
    {{- end }}
  {{- end }}
  selector:
    matchLabels:
      {{- /* must match .spec.template.metadata.labels */}}
      {{- include "helper.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- /* must match .spec.selector.matchLabels */}}
        {{- include "helper.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      automountServiceAccountToken: false
      {{- include "helper.imagePullSecrets" . | nindent 6 }}
      {{- include "helper.podSecurityContext" . | nindent 6 }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.schedulerName }}
      schedulerName: {{ . | quote }}
      {{- end }}
      {{- if eq .Values.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  {{- include "helper.selectorLabels" . | nindent 18 }}
      {{- else if eq .Values.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchLabels:
                    {{- include "helper.selectorLabels" . | nindent 20 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name | quote }}
          image: {{ include "helper.image" . | quote }}
          imagePullPolicy: {{ include "helper.imagePullPolicy" . | quote }}
          {{- with .Values.extraCommand }}
          command:
            {{- tpl . $ | nindent 12 }}
          {{- end }}
          {{- with .Values.extraArgs }}
          args:
            {{- tpl . $ | nindent 12 }}
          {{- end }}
          env:
            {{- include "helper.commonEnvs" . | nindent 12 }}
            {{- include "helper.extraEnvs" . | nindent 12 }}
          ports:
            - name: "http"
              containerPort: 8080
          {{- if eq "true" ( include "helper.livenessProbeEnabled" . ) }}
          livenessProbe:
            httpGet:
              path: "/.well-known/liveness"
              port: "http"
              scheme: "HTTP"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if eq "true" ( include "helper.readinessProbeEnabled" . ) }}
          readinessProbe:
            httpGet:
              path: "/.well-known/readiness"
              port: "http"
              scheme: "HTTP"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- with .Values.extraVolumeMounts }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
      volumes:
        {{- with .Values.extraVolumes }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
      {{- include "helper.extraWorkloadSpec" . | nindent 6 }}
{{- end -}}
